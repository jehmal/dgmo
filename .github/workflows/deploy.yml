name: Deploy

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  BUN_VERSION: 1.0.0
  NODE_VERSION: 20
  PYTHON_VERSION: 3.9
  POETRY_VERSION: 1.5.0

jobs:
  prepare:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      environment: ${{ steps.env.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(git rev-parse --short HEAD)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ $GITHUB_REF == refs/tags/v*.*.* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        service: [opencode, dgm]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/${{ matrix.service }}:${{ needs.prepare.outputs.version }}
            ghcr.io/${{ github.repository }}/${{ matrix.service }}:${{ needs.prepare.outputs.environment }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-opencode:
    name: Deploy OpenCode
    runs-on: ubuntu-latest
    needs: [prepare, build-and-push]
    environment: ${{ needs.prepare.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
      
      - name: Install dependencies
        working-directory: ./opencode
        run: bun install --frozen-lockfile
      
      - name: Deploy with SST
        working-directory: ./opencode
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          STAGE: ${{ needs.prepare.outputs.environment }}
        run: |
          bun run sst deploy --stage $STAGE

  deploy-dgm:
    name: Deploy DGM
    runs-on: ubuntu-latest
    needs: [prepare, build-and-push]
    environment: ${{ needs.prepare.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Kubernetes
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
          NAMESPACE: dgm-${{ needs.prepare.outputs.environment }}
          IMAGE_TAG: ${{ needs.prepare.outputs.version }}
        run: |
          echo "$KUBE_CONFIG" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
          # Apply Kubernetes manifests
          kubectl apply -f dgm/k8s/ -n $NAMESPACE
          
          # Update image
          kubectl set image deployment/dgm-api dgm=ghcr.io/${{ github.repository }}/dgm:$IMAGE_TAG -n $NAMESPACE
          
          # Wait for rollout
          kubectl rollout status deployment/dgm-api -n $NAMESPACE

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-opencode, deploy-dgm]
    steps:
      - uses: actions/checkout@v4
      
      - name: Run smoke tests
        env:
          OPENCODE_URL: ${{ secrets.OPENCODE_URL }}
          DGM_URL: ${{ secrets.DGM_URL }}
        run: |
          # Add smoke test commands
          echo "Running smoke tests..."
          
          # Test OpenCode
          curl -f $OPENCODE_URL/health || exit 1
          
          # Test DGM
          curl -f $DGM_URL/health || exit 1
          
          echo "✅ All smoke tests passed!"

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [prepare, smoke-tests]
    if: always()
    steps:
      - name: Send notification
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          STATUS: ${{ needs.smoke-tests.result }}
          VERSION: ${{ needs.prepare.outputs.version }}
          ENVIRONMENT: ${{ needs.prepare.outputs.environment }}
        run: |
          if [[ "$STATUS" == "success" ]]; then
            COLOR="good"
            MESSAGE="✅ Successfully deployed version $VERSION to $ENVIRONMENT"
          else
            COLOR="danger"
            MESSAGE="❌ Failed to deploy version $VERSION to $ENVIRONMENT"
          fi
          
          curl -X POST $SLACK_WEBHOOK \
            -H 'Content-Type: application/json' \
            -d "{
              \"attachments\": [{
                \"color\": \"$COLOR\",
                \"text\": \"$MESSAGE\",
                \"footer\": \"OpenCode-DGM Deployment\",
                \"ts\": $(date +%s)
              }]
            }"