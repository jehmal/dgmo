version: '3.8'

services:
  # RabbitMQ for message queue and task distribution
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: dgmstt-rabbitmq
    ports:
      - "5672:5672"     # AMQP port
      - "15672:15672"   # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: dgmstt_user
      RABBITMQ_DEFAULT_PASS: dgmstt_secure_pass_${ENVIRONMENT:-dev}
      RABBITMQ_DEFAULT_VHOST: dgmstt
      RABBITMQ_MANAGEMENT_LOAD_DEFINITIONS: /etc/rabbitmq/definitions.json
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./shared/orchestration/config/rabbitmq-definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - dgmstt-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped

  # Redis for state management and caching
  redis:
    image: redis:7.2-alpine
    container_name: dgmstt-redis
    ports:
      - "6379:6379"
    command: >
      redis-server
      --requirepass dgmstt_redis_pass_${ENVIRONMENT:-dev}
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_data:/data
    networks:
      - dgmstt-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Redis Commander for development
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: dgmstt-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379:0:dgmstt_redis_pass_${ENVIRONMENT:-dev}
      HTTP_USER: admin
      HTTP_PASSWORD: admin_pass_${ENVIRONMENT:-dev}
    ports:
      - "8085:8081"
    networks:
      - dgmstt-network
    depends_on:
      redis:
        condition: service_healthy
    profiles:
      - development

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: dgmstt-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./shared/orchestration/config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - dgmstt-network
    restart: unless-stopped

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:10.2.2
    container_name: dgmstt-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin_pass_${ENVIRONMENT:-dev}
      GF_INSTALL_PLUGINS: redis-datasource,rabbitmq-prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./shared/orchestration/config/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - dgmstt-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.52
    container_name: dgmstt-jaeger
    ports:
      - "5775:5775/udp"   # Agent accept zipkin.thrift
      - "6831:6831/udp"   # Agent accept jaeger.thrift
      - "6832:6832/udp"   # Agent accept jaeger.thrift binary
      - "5778:5778"       # Agent serve configs
      - "16686:16686"     # Jaeger UI
      - "14268:14268"     # Accept jaeger.thrift
      - "14250:14250"     # Accept model.proto
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
      SPAN_STORAGE_TYPE: memory
    networks:
      - dgmstt-network
    restart: unless-stopped

volumes:
  rabbitmq_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  dgmstt-network:
    external: true